/** @file
 * The input file to CMake's configure_file() which produces
 * the config.h header, which in-turn defines macros needed by 
 * the QuEST source, as informed by user-specified CMake options.
 * 
 * Use of this configured header file enables all macros to be 
 * defined in one central place (right here) rather than being 
 * passed to each source file as compiler flags. It further
 * ensures that when QuEST is installed, critical user-facing
 * macros such as FLOAT_PRECISION cannot ever be changed from
 * their value during source compilation. Finally, it enables
 * users to access macros such as COMPILE_OPENMP at pre-build
 * time of their own source code, which could prove necessary 
 * when interfacing with external libraries.
 * 
 * Use of this config file however means that manual compilation
 * (through GNUMake or a manual script) requires generating the
 * config.h file manually.
 * 
 * @author Luc Jaulmes
 * @author Oliver Brown
 * @author Tyson Jones (centralising macros, validation, doc)
 */

#ifndef CONFIG_H
#define CONFIG_H



/*
 * check that the below CMake options are not being erroneously
 * passed as macros (as was previously accepted), which would 
 * anyway trigger a 'macro redefined' warning below.
 */


#if defined(FLOAT_PRECISION)              || \
    defined(COMPILE_OPENMP)               || \
    defined(COMPILE_MPI)                  || \
    defined(COMPILE_CUDA)                 || \
    defined(COMPILE_HIP)                  || \
    defined(COMPILE_CUQUANTUM)            || \
    defined(NUMA_AWARE)                   || \
    defined(INCLUDE_DEPRECATED_FUNCTIONS) || \
    defined(DISABLE_DEPRECATION_WARNINGS)

    #error "Pre-config macros were erroneously passed directly to the source rather than through the CMake config file."

#endif


#if defined(QUEST_VERSION_MAJOR) || \
    defined(QUEST_VERSION_MINOR) || \
    defined(QUEST_VERSION_PATCH) || \
    defined(QUEST_VERSION_STRING)

    #error "QuEST version macros were erroneously passed directly to the source rather than through the CMake config file."

#endif



/*
 * save the CMake option values as macros. 
 *
 * Note we use cmakedefine (rather than just define @VAL) so that 
 * the macro is totally avoided being defined if the corresponding 
 * CMake variable was not passed to this config file, which we can
 * subsequently detect and error-out below
 */ 


// crucial to user source (informs API)
#cmakedefine FLOAT_PRECISION @FLOAT_PRECISION@
#cmakedefine01 INCLUDE_DEPRECATED_FUNCTIONS
#cmakedefine01 DISABLE_DEPRECATION_WARNINGS


// crucial to QuEST source (informs external library usage)
#cmakedefine01 COMPILE_OPENMP
#cmakedefine01 COMPILE_MPI
#cmakedefine01 COMPILE_CUDA
#cmakedefine01 COMPILE_CUQUANTUM


// not actually a CMake option (user cannot disable) but nonetheless crucial
#cmakedefine01 NUMA_AWARE


// not consulted by src (included for book-keeping)
#cmakedefine01 COMPILE_HIP



/*
 * inherit the version information from CMake.
 *
 * Note we do not (and actually cannot) validate these using the 
 * cmakedefine trick used above since they are always gauranteed 
 * to be passed and substituted by CMake
 */ 


#define QUEST_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
#define QUEST_VERSION_MINOR @PROJECT_VERSION_MINOR@
#define QUEST_VERSION_PATCH @PROJECT_VERSION_PATCH@
#define QUEST_VERSION_STRING "@PROJECT_VERSION@"



/*
 * check that all above expected CMake options were
 * actually passed (since use of 'cmakedefine' means
 * they otherwise default to no macro definition)
 */


#if ! defined(FLOAT_PRECISION)              || \
    ! defined(COMPILE_OPENMP)               || \
    ! defined(COMPILE_MPI)                  || \
    ! defined(COMPILE_CUDA)                 || \
    ! defined(COMPILE_HIP)                  || \
    ! defined(COMPILE_CUQUANTUM)            || \
    ! defined(NUMA_AWARE)                   || \
    ! defined(INCLUDE_DEPRECATED_FUNCTIONS) || \
    ! defined(DISABLE_DEPRECATION_WARNINGS)

    #error "Expected macros were not defined by the config.h header, possibly because their corresponding CMake variables were not substituted."

#endif



/*
 * validate boolean macro definitions.
 *
 * Note that more specific checks (e.g. whether non-boolean
 * macros have legal values, or whether combinations of
 * multiple macro values are legal) are performed by the files
 * that concern them. These checks merely validate the macro
 * has the right 'type' so will not trip up other preprocesing
 */


#if ! (COMPILE_OPENMP               == 0 || COMPILE_OPENMP               == 1) || \
    ! (COMPILE_MPI                  == 0 || COMPILE_MPI                  == 1) || \
    ! (COMPILE_CUDA                 == 0 || COMPILE_CUDA                 == 1) || \
    ! (COMPILE_HIP                  == 0 || COMPILE_HIP                  == 1) || \
    ! (COMPILE_CUQUANTUM            == 0 || COMPILE_CUQUANTUM            == 1) || \
    ! (NUMA_AWARE                   == 0 || NUMA_AWARE                   == 1) || \
    ! (INCLUDE_DEPRECATED_FUNCTIONS == 0 || INCLUDE_DEPRECATED_FUNCTIONS == 1) || \
    ! (DISABLE_DEPRECATION_WARNINGS == 0 || DISABLE_DEPRECATION_WARNINGS == 1)

    #error "A macro defined by the config.h header (as inferred from a CMake variable) had an illegal value."

#endif


// ensure __cplusplus macro is valid (API headers use #ifdef, not #if)

#ifdef __cplusplus
#if !__cplusplus
#error "Preprocessor __cplusplus was 0 and should instead be undefined"
#endif
#endif



#endif // CONFIG_H